" Don't try to be vi compatible
set nocompatible

" Pick a leader key
let mapleader = ","

" fzf options
set rtp+=~/.fzf
let $BAT_THEME='GitHub'
let g:fzf_layout = { 'down': '40%' }

" Fern options
" map <C-n> :Fern . -drawer<CR>
" let g:fern#renderer = "nerdfont"

" NERDTree options
" Open the tree on <C-n>:
map <C-n> :AirlineRefresh <bar> NERDTreeToggle<CR>
" Remove the help line from the top of the tree
let NERDTreeMinimalUI=1

" Integrate with powerline fonts
let g:airline_powerline_fonts = 1
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

" tagbar
nmap <Leader>tt :TagbarToggle<CR>
" make
nmap <Leader>m :w <bar> :make<CR>

" Ycm shortcuts / options
nmap <Leader>yg :YcmCompleter GoTo<CR>
nmap <Leader>yr :YcmCompleter RefactorRename <C-R><C-W>
nmap <Leader>yf :YcmCompleter FixIt<CR>
nmap <leader>yd <plug>(YCMHover)
let g:ycm_log_level = 'info'
"let g:ycm_log_level = 'debug'
let g:ycm_auto_hover = ''
let g:ycm_clangd_args = ['--clang-tidy']
let g:ycm_autoclose_preview_window_after_insertion = 1

" Ripgrep
nmap <Leader>rr :Rg <C-R><C-W><CR>

" vim-clang-format
let g:clang_format#detect_style_file = 1
let g:clang_format#style_options = {
            \ "BasedOnStyle": "WebKit",
            \ "AlignConsecutiveMacros": "AcrossEmptyLines",
            \ "ColumnLimit":     80,
            \ "KeepEmptyLinesAtTheStartOfBlocks": "false",
            \ "PointerAlignment": "Middle",
            \ "ReferenceAlignment": "Right",
            \ "SpaceAfterCStyleCast": "true",
            \ "SpaceInEmptyParentheses": "true"}


" map to <Leader>cf in C++ code
autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>
" if you install vim-operator-user
autocmd FileType c,cpp,objc map <buffer><Leader>x <Plug>(operator-clang-format)
" Toggle auto formatting:
nmap <Leader>C :ClangFormatAutoToggle<CR>


" Vimspector
let g:vimspector_enable_mappings = 'HUMAN'
" mnemonic 'di' = 'debug inspect' (pick your own, if you prefer!)
" for normal mode - the word under the cursor
nmap <Leader>di <Plug>VimspectorBalloonEval
" for visual mode, the visually selected text
xmap <Leader>di <Plug>VimspectorBalloonEval
" Exit the debug mode
nmap <Leader>dx <Plug>VimspectorBalloonEval
" https://dev.to/iggredible/debugging-in-vim-with-vimspector-4n0m
" nnoremap <Leader>dd :call vimspector#Launch()<CR>
nnoremap <Leader>de :call vimspector#Reset()<CR>
" nnoremap <Leader>dc :call vimspector#Continue()<CR>
" nnoremap <Leader>dt :call vimspector#ToggleBreakpoint()<CR>
" nnoremap <Leader>dT :call vimspector#ClearBreakpoints()<CR>
" nmap <Leader>dk <Plug>VimspectorRestart
" nmap <Leader>dh <Plug>VimspectorStepOut
" nmap <Leader>dl <Plug>VimspectorStepInto
" nmap <Leader>dj <Plug>VimspectorStepOver

" ALE
let g:ale_floating_window_border = repeat([''], 6)
" Turn on syntax highlighting
syntax on

" For plugins to load correctly
filetype plugin indent on

" Security
set modelines=0

" Show line numbers
set number
set relativenumber

" Show file stats
set ruler

" Blink cursor on error instead of beeping
set visualbell

" Encoding
set encoding=utf-8

" Whitespace
set wrap
set textwidth=79
set colorcolumn=80
set formatoptions=tcqrn1
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set noshiftround

" Cursor motion
set scrolloff=3
set backspace=indent,eol,start
set matchpairs+=<:> " use % to jump between pairs

" Move up/down editor lines
nnoremap j gj
nnoremap k gk

" Allow hidden buffers
set hidden

" Rendering
set ttyfast

" Status bar
set laststatus=2
set ttimeoutlen=50

" Last line
set showmode
set showcmd

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase
set showmatch
"map <leader><space> :let @/=''<cr> " clear search
" Make double-<Esc> clear search highlights
nnoremap <silent> <Esc><Esc> <Esc>:noh<CR><Esc>

" Spelling
set spell

" Save window size and position in session
set sessionoptions+=resize

" To add the proper PEP 8 indentation (Python)
augroup pythonindent
    au!
    au BufNewFile,BufRead *.py
        \ set tabstop=4
        \ | set softtabstop=4
        \ | set shiftwidth=4
        \ | set textwidth=79
        \ | set expandtab
        \ | set autoindent
        \ | set fileformat=unix
augroup END

" Flag unnecessary whitespace
"define BadWhitespace before using in a match
augroup flagwhitespace
    au!
    au ColorScheme * highlight BadWhitespace ctermbg=red guibg=tan
    highlight BadWhitespace ctermbg=red guibg=tan
    au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/
augroup END

" Bd works as bd but without touching the window splits
command! Bd bp|bd #

"Remove all trailing whitespace by pressing F2
nnoremap <F2> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>


" For full stack development
"au BufNewFile,BufRead *.js, *.html, *.css
augroup jsdev
    au!
    au BufNewFile,BufRead *.js
        \ set tabstop=2
        \ | set softtabstop=2
        \ | set shiftwidth=2
augroup END


" reload vim config automatically when file is changed
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

" Formatting
"map <leader>q gqip

" Visualize tabs and newlines
"set listchars=tab:?\ ,eol:¬
" Uncomment this to enable by default:
" set list " To enable by default
" Or use your leader key + l to toggle on/off
"map <leader>l :set list!<CR> " Toggle tabs and EOL

" Color scheme (terminal)
"set t_Co=256
"set background=dark
let g:solarized_termcolors=256
let g:solarized_termtrans=1
" put https://raw.github.com/altercation/vim-colors-solarized/master/colors/solarized.vim
" in ~/.vim/colors/ and uncomment:
"colorscheme desert
"

" Bind F5 to save file if modified and execute python script in a buffer.
" nnoremap <silent> <F5> :call SaveAndExecutePython()<CR>
" vnoremap <silent> <F5> :<C-u>call SaveAndExecutePython()<CR>

function! SaveAndExecutePython()
    " SOURCE [reusable window]: https://github.com/fatih/vim-go/blob/master/autoload/go/ui.vim

    " save and reload current file
    silent execute "update | edit"

    " get file path of current file
    let s:current_buffer_file_path = expand("%")

    let s:output_buffer_name = "Python"
    let s:output_buffer_filetype = "output"

    " reuse existing buffer window if it exists otherwise create a new one
    if !exists("s:buf_nr") || !bufexists(s:buf_nr)
        silent execute 'botright new ' . s:output_buffer_name
        let s:buf_nr = bufnr('%')
    elseif bufwinnr(s:buf_nr) == -1
        silent execute 'botright new'
        silent execute s:buf_nr . 'buffer'
    elseif bufwinnr(s:buf_nr) != bufwinnr('%')
        silent execute bufwinnr(s:buf_nr) . 'wincmd w'
    endif

    silent execute "setlocal filetype=" . s:output_buffer_filetype
    setlocal bufhidden=delete
    setlocal buftype=nofile
    setlocal noswapfile
    setlocal nobuflisted
    setlocal winfixheight
    setlocal cursorline " make it easy to distinguish
    setlocal nonumber
    setlocal norelativenumber
    setlocal showbreak=""

    " clear the buffer
    setlocal noreadonly
    setlocal modifiable
    %delete _

    " add the console output
    silent execute ".!python3 " . shellescape(s:current_buffer_file_path, 1)

    " resize window to content length
    " Note: This is annoying because if you print a lot of lines then your code
    "       buffer is forced to a height of one line every time you run this
    "       function.  However without this line the buffer starts off as
    "       a default size and if you resize the buffer then it keeps that
    "       custom size after repeated runs of this function.  But if you close
    "       the output buffer then it returns to using the default size when
    "       its recreated
    "execute 'resize' . line('$')

    " make the buffer non modifiable
    setlocal readonly
    setlocal nomodifiable
endfunction
